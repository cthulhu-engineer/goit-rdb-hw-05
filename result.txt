# SQL запит, який буде відображати таблицю order_details та поле customer_id з таблиці orders відповідно для кожного поля запису з таблиці order_details.
SELECT order_details.*,
       (SELECT customer_id FROM orders WHERE orders.id = order_details.order_id) AS customer_id
FROM order_details
LIMIT 10;
+--+--------+----------+--------+-----------+
|id|order_id|product_id|quantity|customer_id|
+--+--------+----------+--------+-----------+
|1 |10248   |11        |12      |90         |
|2 |10248   |42        |10      |90         |
|3 |10248   |72        |5       |90         |
|4 |10249   |14        |9       |81         |
|5 |10249   |51        |40      |81         |
|6 |10250   |41        |10      |34         |
|7 |10250   |51        |35      |34         |
|8 |10250   |65        |15      |34         |
|9 |10251   |22        |6       |84         |
|10|10251   |57        |15      |84         |
+--+--------+----------+--------+-----------+


# SQL запит, який буде відображати таблицю order_details. Відфільтруйте результати так, щоб відповідний запис із таблиці orders виконував умову shipper_id=3.
SELECT *
FROM order_details
WHERE order_id IN (SELECT order_id FROM orders WHERE shipper_id = 3)
LIMIT 10;
+--+--------+----------+--------+
|id|order_id|product_id|quantity|
+--+--------+----------+--------+
|1 |10248   |11        |12      |
|2 |10248   |42        |10      |
|3 |10248   |72        |5       |
|4 |10249   |14        |9       |
|5 |10249   |51        |40      |
|6 |10250   |41        |10      |
|7 |10250   |51        |35      |
|8 |10250   |65        |15      |
|9 |10251   |22        |6       |
|10|10251   |57        |15      |
+--+--------+----------+--------+


# SQL запит, вкладений в операторі FROM, який буде обирати рядки з умовою quantity>10 з таблиці order_details. Для отриманих даних знайдіть середнє значення поля quantity — групувати слід за order_id.
SELECT order_id,
       AVG(quantity) AS average_quantity
FROM (SELECT * FROM order_details WHERE quantity > 10) AS temp_table
GROUP BY order_id
LIMIT 10;
+--------+----------------+
|order_id|average_quantity|
+--------+----------------+
|10248   |12.0000         |
|10249   |40.0000         |
|10250   |25.0000         |
|10251   |17.5000         |
|10252   |35.0000         |
|10253   |34.0000         |
|10254   |19.0000         |
|10255   |27.5000         |
|10256   |13.5000         |
|10257   |20.0000         |
+--------+----------------+


# Розв’яжіть завдання 3, використовуючи оператор WITH для створення тимчасової таблиці temp
WITH temp AS (
    SELECT * FROM order_details WHERE quantity > 10
)
SELECT order_id,
       AVG(quantity) AS average_quantity
FROM temp
GROUP BY order_id
LIMIT 10;
+--------+----------------+
|order_id|average_quantity|
+--------+----------------+
|10248   |12.0000         |
|10249   |40.0000         |
|10250   |25.0000         |
|10251   |17.5000         |
|10252   |35.0000         |
|10253   |34.0000         |
|10254   |19.0000         |
|10255   |27.5000         |
|10256   |13.5000         |
|10257   |20.0000         |
+--------+----------------+


# Створіть функцію з двома параметрами, яка буде ділити перший параметр на другий. Обидва параметри та значення, що повертається, повинні мати тип FLOAT.
CREATE FUNCTION divide_function(dividend FLOAT, divisor FLOAT)
    RETURNS FLOAT
    DETERMINISTIC
BEGIN
    RETURN dividend / divisor;
END;



# Використайте конструкцію DROP FUNCTION IF EXISTS. Застосуйте функцію до атрибута quantity таблиці order_details . Другим параметром може бути довільне число на ваш розсуд.
DROP FUNCTION IF EXISTS divide_function;
SELECT
    order_id,
    product_id,
    quantity,
    divide_function(quantity, 2.0) AS divided_quantity
FROM
    order_details
LIMIT 10;
+--------+----------+--------+----------------+
|order_id|product_id|quantity|divided_quantity|
+--------+----------+--------+----------------+
|10248   |11        |12      |6               |
|10248   |42        |10      |5               |
|10248   |72        |5       |2.5             |
|10249   |14        |9       |4.5             |
|10249   |51        |40      |20              |
|10250   |41        |10      |5               |
|10250   |51        |35      |17.5            |
|10250   |65        |15      |7.5             |
|10251   |22        |6       |3               |
|10251   |57        |15      |7.5             |
+--------+----------+--------+----------------+

